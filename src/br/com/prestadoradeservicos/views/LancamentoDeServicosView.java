/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CadastroDeCliente.java
 *
 * Created on 24/10/2009, 14:28:23
 */
package br.com.prestadoradeservicos.views;

import br.com.prestadoradeservicos.controlers.LancamentoDeServicosControler;
import br.com.prestadoradeservicos.entidades.Cliente;
import br.com.prestadoradeservicos.entidades.Servico;
import br.com.prestadoradeservicos.entidades.TipoDeServico;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Anderson Luis Ribeiro
 */
public class LancamentoDeServicosView extends javax.swing.JFrame {

    private MaskFormatter formatoData;
    private LancamentoDeServicosControler controller;

    /** Creates new form CadastroDeCliente */
    public LancamentoDeServicosView(LancamentoDeServicosControler controller) {
        initComponents();
        setLocationRelativeTo(null);
        this.controller = controller;
        preencheJtable();
        bloquearCampos();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jpDadosDoLancamento = new javax.swing.JPanel();
        lbServico = new javax.swing.JLabel();
        lbCliente = new javax.swing.JLabel();
        cbServicos = new javax.swing.JComboBox();
        cbClientes = new javax.swing.JComboBox();
        lbData = new javax.swing.JLabel();
        lbValor = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        try{     formatoData = new MaskFormatter("##/##/####"); }catch(Exception erro){    JOptionPane.showMessageDialog(null, "Nao foi possivel setar a mascara: " + erro); }
        txtData = new JFormattedTextField(formatoData);
        jLabel1 = new javax.swing.JLabel();
        txtItendificador = new javax.swing.JTextField();
        txtNumeroDoServico = new javax.swing.JTextField();
        lbNumeroDoServico = new javax.swing.JLabel();
        spServicosLancados = new javax.swing.JScrollPane();
        jtServicosLancados = new javax.swing.JTable();
        lbServicosLancados = new javax.swing.JLabel();
        menuPrincipal = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        miNovo = new javax.swing.JMenuItem();
        miSalvar = new javax.swing.JMenuItem();
        miEditar = new javax.swing.JMenuItem();
        miExcluir = new javax.swing.JMenuItem();
        miSair = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Tipos de Serviços");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jpDadosDoLancamento.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados do Lançamento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        lbServico.setText("Serviço:");

        lbCliente.setText("Cliente:");

        cbServicos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbServicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbServicosActionPerformed(evt);
            }
        });

        cbClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClientesActionPerformed(evt);
            }
        });

        lbData.setText("Data:");

        lbValor.setText("Valor:");

        jLabel1.setText("Id.:");

        lbNumeroDoServico.setText("Nº. Serviço:");

        javax.swing.GroupLayout jpDadosDoLancamentoLayout = new javax.swing.GroupLayout(jpDadosDoLancamento);
        jpDadosDoLancamento.setLayout(jpDadosDoLancamentoLayout);
        jpDadosDoLancamentoLayout.setHorizontalGroup(
            jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDadosDoLancamentoLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(lbCliente)
                    .addComponent(lbServico)
                    .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbValor)
                        .addComponent(lbData))
                    .addComponent(lbNumeroDoServico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDadosDoLancamentoLayout.createSequentialGroup()
                        .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbClientes, 0, 248, Short.MAX_VALUE)
                            .addComponent(cbServicos, 0, 248, Short.MAX_VALUE)
                            .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtValor, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                .addComponent(txtNumeroDoServico, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(306, 306, 306))
                    .addGroup(jpDadosDoLancamentoLayout.createSequentialGroup()
                        .addComponent(txtItendificador, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jpDadosDoLancamentoLayout.setVerticalGroup(
            jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDadosDoLancamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(txtItendificador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbServico)
                    .addComponent(cbServicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCliente)
                    .addComponent(cbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbData)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumeroDoServico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNumeroDoServico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpDadosDoLancamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbValor)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jtServicosLancados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Data", "Num.", "Serviço", "Cliente", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtServicosLancados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtServicosLancadosMouseClicked(evt);
            }
        });
        spServicosLancados.setViewportView(jtServicosLancados);
        jtServicosLancados.getColumnModel().getColumn(0).setResizable(false);
        jtServicosLancados.getColumnModel().getColumn(2).setResizable(false);
        jtServicosLancados.getColumnModel().getColumn(3).setResizable(false);
        jtServicosLancados.getColumnModel().getColumn(4).setResizable(false);

        lbServicosLancados.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbServicosLancados.setText("Serviços Lançados:");

        menu.setText("Menu");

        miNovo.setText("Novo");
        miNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNovoActionPerformed(evt);
            }
        });
        menu.add(miNovo);

        miSalvar.setText("Salvar");
        miSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSalvarActionPerformed(evt);
            }
        });
        menu.add(miSalvar);

        miEditar.setText("Editar");
        miEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditarActionPerformed(evt);
            }
        });
        menu.add(miEditar);

        miExcluir.setText("Excluir");
        miExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExcluirActionPerformed(evt);
            }
        });
        menu.add(miExcluir);

        miSair.setText("Sair");
        miSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSairActionPerformed(evt);
            }
        });
        menu.add(miSair);

        menuPrincipal.add(menu);

        setJMenuBar(menuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(spServicosLancados, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jpDadosDoLancamento, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lbServicosLancados))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpDadosDoLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(lbServicosLancados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spServicosLancados, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSalvarActionPerformed
        
        if( (txtItendificador.getText().equals("")) && (controller.verificarTotalDeServicosLancadosNoDia(formatarData(txtData.getText())) >= 3) ){
            JOptionPane.showMessageDialog(null, "Você só pode lançar 3 serviços diariamente.");
        }else{
            controller.salvarServico();
        }

        preencheJtable();
    }//GEN-LAST:event_miSalvarActionPerformed

    private void miEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditarActionPerformed
        desbloquearCampos();
    }//GEN-LAST:event_miEditarActionPerformed

    private void jtServicosLancadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtServicosLancadosMouseClicked
        sincronizarViewComModel((Servico) jtServicosLancados.getValueAt(jtServicosLancados.getSelectedRow(), 2));
        bloquearCampos();
    }//GEN-LAST:event_jtServicosLancadosMouseClicked

    private void miSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSairActionPerformed
        dispose();
    }//GEN-LAST:event_miSairActionPerformed

    private void miNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNovoActionPerformed
        limparCampos();
        desbloquearCampos();
    }//GEN-LAST:event_miNovoActionPerformed

    private void miExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExcluirActionPerformed
        controller.excluirServico();
        preencheJtable();
    }//GEN-LAST:event_miExcluirActionPerformed

    private void cbServicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbServicosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbServicosActionPerformed

    private void cbClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbClientesActionPerformed
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new LancamentoDeServicosView().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbClientes;
    private javax.swing.JComboBox cbServicos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel jpDadosDoLancamento;
    private javax.swing.JTable jtServicosLancados;
    private javax.swing.JLabel lbCliente;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbNumeroDoServico;
    private javax.swing.JLabel lbServico;
    private javax.swing.JLabel lbServicosLancados;
    private javax.swing.JLabel lbValor;
    private javax.swing.JMenu menu;
    private javax.swing.JMenuBar menuPrincipal;
    private javax.swing.JMenuItem miEditar;
    private javax.swing.JMenuItem miExcluir;
    private javax.swing.JMenuItem miNovo;
    private javax.swing.JMenuItem miSair;
    private javax.swing.JMenuItem miSalvar;
    private javax.swing.JScrollPane spServicosLancados;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtItendificador;
    private javax.swing.JTextField txtNumeroDoServico;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables

    public void preencheComboServicos() {

        cbServicos.removeAllItems();
        List<TipoDeServico> lista = controller.listaTiposDeServico();
        cbServicos.addItem("Selecione");
        for (TipoDeServico objeto : lista) {
            cbServicos.addItem(objeto);
        }

    }

    public void preencheComboClientes() {

        cbClientes.removeAllItems();
        List<Cliente> lista = controller.listaClientes();
        cbClientes.addItem("Selecione");
        for (Cliente objeto : lista) {
            cbClientes.addItem(objeto);
        }

    }

    public void bloquearCampos() {

        txtItendificador.setEditable(false);
        cbServicos.setEditable(false);
        cbClientes.setEditable(false);
        txtData.setEditable(false);
        txtNumeroDoServico.setEditable(false);
        txtValor.setEditable(false);

    }

    public void desbloquearCampos() {

        cbServicos.setEditable(true);
        cbClientes.setEditable(true);
        txtData.setEditable(true);
        txtNumeroDoServico.setEditable(true);
        txtValor.setEditable(true);

    }

    public boolean sincronizarModelComView(Servico model) {

        if (!txtItendificador.getText().equals("")) {
            model.setId(Integer.parseInt(txtItendificador.getText()));
        }else{
            model.setId(null);
        }

        if (!cbClientes.getSelectedItem().equals("Selecione")) {
            model.setCliente((Cliente) cbClientes.getSelectedItem());
        } else {
            JOptionPane.showMessageDialog(null, "O cliente é obrigatório");
            return false;
        }

        if (!cbServicos.getSelectedItem().equals("Selecione")) {
            model.setTipoDeServico((TipoDeServico) cbServicos.getSelectedItem());
        } else {
            JOptionPane.showMessageDialog(null, "O tipo de serviço é obrigatório");
            return false;
        }

        if (!txtData.getText().equals("")) {
            model.setDataDoServico(formatarData(txtData.getText()));
        } else {
            JOptionPane.showMessageDialog(null, "A data é obrigatória");
            return false;
        }

        if (!txtNumeroDoServico.getText().equals("")) {
            model.setNumeroDoServico(Integer.parseInt(txtNumeroDoServico.getText()));
        } else {
            JOptionPane.showMessageDialog(null, "O numero do serviço é obrigatório");
            return false;
        }

        if (!txtValor.getText().equals("")) {
            model.setValorDoServico(Double.parseDouble(txtValor.getText().replace(",", ".")));
        } else {
            JOptionPane.showMessageDialog(null, "O valor do serviço é obrigatório");
            return false;
        }

        return true;

    }

    /**
     * Preenche as o jtable com os clientes cadastrados
     */
    public void preencheJtable() {

        jtServicosLancados.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jtServicosLancados.getColumn("Data").setPreferredWidth(80);
        jtServicosLancados.getColumn("Num.").setPreferredWidth(50);
        jtServicosLancados.getColumn("Serviço").setPreferredWidth(150);
        jtServicosLancados.getColumn("Cliente").setPreferredWidth(260);
        jtServicosLancados.getColumn("Valor").setPreferredWidth(100);


        List<Servico> lista = controller.listarServicos();

        DefaultTableModel modelo = (DefaultTableModel) jtServicosLancados.getModel();

        for (int i = (modelo.getRowCount() - 1); i >= 0; --i) {
            modelo.removeRow(i);
        }

        SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");

        for (Servico objeto : lista) {

            modelo.addRow(new Object[]{formatador.format(objeto.getDataDoServico()), objeto.getNumeroDoServico(), objeto, objeto.getCliente().getNome(), "R$ " +  objeto.getValorDoServico()});

        }

    }

    public void sincronizarViewComModel(Servico model) {

        if (model.getId() != null) {
            txtItendificador.setText(model.getId().toString());
        }

        if (model.getTipoDeServico() != null) {
            cbServicos.setSelectedItem(model.getTipoDeServico());
        }

        if (model.getCliente() != null) {
            cbClientes.setSelectedItem(model.getCliente());
        }

        if (model.getDataDoServico() != null) {
            SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
            txtData.setText(formatador.format(model.getDataDoServico()));
        }

        if (model.getNumeroDoServico() != null) {
            txtNumeroDoServico.setText(model.getNumeroDoServico().toString());
        }

        if (model.getValorDoServico() != null) {
            txtValor.setText(model.getValorDoServico().toString());
        }

    }

    public void limparCampos() {

        txtItendificador.setText("");
        cbServicos.setSelectedItem("Selecione");
        cbClientes.setSelectedItem("Selecione");
        txtData.setText("");
        txtNumeroDoServico.setText("");
        txtValor.setText("");

    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        preencheComboClientes();
        preencheComboServicos();
    }

    private Date formatarData(String dataString){

        SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
        Date dataFormatada = null;
        try {
            dataFormatada = formatador.parse(dataString);
            return dataFormatada;
        } catch (ParseException ex) {
            Logger.getLogger(RelatorioServicosExecutadosView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dataFormatada;

    }
}
